import requests
import sys
import xml.etree.ElementTree as ET
from xml.etree import ElementTree
import random
import xmltodict
import json
from datetime import datetime, timedelta
from datetime import datetime
import time


from random import randint

import base64
import json
global b

service = 'http://52.172.52.177/webconsole/api/'

loginReq = '<DM2ContentIndexing_CheckCredentialReq username="Cvadmin" password="<<password>>" />'

pwd = 'Qwerty@123'
pwd = bytes(pwd, encoding='utf8')
pwd = str(base64.b64encode(pwd), encoding='utf-8')
loginReq = loginReq.replace("<<password>>", pwd)
   
r = requests.post(service + 'Login', data=loginReq)
print ("==========================================================================")
token = None
print (r)
if r.status_code == 200:
   root = ET.fromstring(r.text)
   if 'token' in root.attrib:
      token = root.attrib['token']
      print ("Login Successful")
      print (r.status_code)
   else:
      print ("Login Failed")
      print (r.status_code)
      sys.exit(0)
else:
   print ('there was an error logging in')
   print (r.status_code)
headers = {'Authtoken': token, 'Content-Type': 'application/xml'}

now = datetime.now()
hours_before = datetime.now() - timedelta(hours=4800)

to_time = (int(time.mktime(now.timetuple())))
from_time = (int(time.mktime(hours_before.timetuple())))

def browse_client():
    
    schedules = service + "SchedulePolicy/207"
    global headers
    r = requests.get(schedules, headers=headers)
    r_string = (str(r.text))
    r_string = (r_string.replace('clientName', ' uniquekey '))
    a = r_string.split()
    count = (a.count('uniquekey'))
    dic = (xmltodict.parse(r.text))
    if count == 1:
        newclientId = dic['TMMsg_GetTaskDetailResp']['taskInfo']['associations']['@clientId']
    else:
        client_Id = []
        for i in dic['TMMsg_GetTaskDetailResp']['taskInfo']['associations']:
            client_Id.append(i['@clientId'])
        newclientId = random.choice(client_Id)
        
    print (newclientId)
    subclient = service + "Subclient?clientId="+newclientId
    r = requests.get(subclient, headers=headers)
    r_string = (str(r.text))
    r_string = (r_string.replace('subClientProperties', ' data '))
    a = r_string.split()
    count1 = (a.count('data'))
    dic = (xmltodict.parse(r.text))
    
    if count1 == 2:
        subclientId = dic['App_GetSubClientPropertiesResponse']['subClientProperties']['subClientEntity']['@subclientId']
        backupsetId = dic['App_GetSubClientPropertiesResponse']['subClientProperties']['subClientEntity']['@backupsetId']
        backupsetName = dic['App_GetSubClientPropertiesResponse']['subClientProperties']['subClientEntity']['@backupsetName']
        instanceId = dic['App_GetSubClientPropertiesResponse']['subClientProperties']['subClientEntity']['@instanceId']
        applicationId = dic['App_GetSubClientPropertiesResponse']['subClientProperties']['subClientEntity']['@applicationId']
        clientId = dic['App_GetSubClientPropertiesResponse']['subClientProperties']['subClientEntity']['@clientId']
        clientName = dic['App_GetSubClientPropertiesResponse']['subClientProperties']['subClientEntity']['@clientName']
        
    else:
        count1 = int(count1/2)
        i = randint(0, count1-1)
        subclientId = dic['App_GetSubClientPropertiesResponse']['subClientProperties'][i]['subClientEntity']['@subclientId']
        backupsetId = dic['App_GetSubClientPropertiesResponse']['subClientProperties'][i]['subClientEntity']['@backupsetId']
        backupsetName = dic['App_GetSubClientPropertiesResponse']['subClientProperties'][i]['subClientEntity']['@backupsetName']
        instanceId = dic['App_GetSubClientPropertiesResponse']['subClientProperties'][i]['subClientEntity']['@instanceId']
        applicationId = dic['App_GetSubClientPropertiesResponse']['subClientProperties'][i]['subClientEntity']['@applicationId']
        clientId = dic['App_GetSubClientPropertiesResponse']['subClientProperties'][i]['subClientEntity']['@clientId']
        clientName = dic['App_GetSubClientPropertiesResponse']['subClientProperties'][i]['subClientEntity']['@clientName']
        
    
    print ("details", subclientId, backupsetId, backupsetName, instanceId, applicationId, clientId, clientName)
    subclient_BROWSE = service + "Subclient/"+subclientId+"/Browse?path=%5C"
    headers = {'Authtoken': token}
    
    r = requests.get(subclient_BROWSE, headers=headers)
    
    json1 = (xmltodict.parse(r.text))
    print (json1)
    path = []
    if 'messages' in r.text:
        print ("There is no backups for the selected subclient")
        
    else:   
        for i in json1['databrowse_BrowseResponseList']['browseResponses'][0]['browseResult']['dataResultSet']:
            #print(type(i))
            if type(i)==str:
                if i=="@path":
                   path.append(json1['databrowse_BrowseResponseList']['browseResponses'][0]['browseResult']['dataResultSet'][i])
            else:
                for z in i:
                    if z == "@path":
                       path.append(i[z])
  # print ("type111", type(path))    
    path = random.choice(path)
    print (path)
    return subclientId, backupsetId, backupsetName, instanceId, applicationId, clientId, clientName, path

b=browse_client()
b=list(b)
z=b[7]

def browse_data(b,z,to_time,from_time):
    path1 = []
    restore_file = []
    browse = service + "DoBrowse"
    xml ="""<databrowse_BrowseRequest opType="browse">
      <entity clientName="{}" applicationId="{}" clientId="{}" subclientId="{}" backupsetId="{}" instanceId="{}"/>
      <paths path="{}"/>
      <timeRange toTime="{}" fromTime="{}"/>
      <options showDeletedFiles="1" restoreIndex="1"/>
      <mode mode="2"/>
      <queries type="1" queryId="countQuery">
        <aggrParam aggrType="4" field="0"/>
      </queries>
      <queries type="0" queryId="dataQuery">
        <dataParam>
          <paging firstNode="0" skipNode="0" pageSize="15"/>
          <sortParam ascending="1">
            <sortBy val="38"/>
            <sortBy val="0"/>
          </sortParam>
        </dataParam>
      </queries>
    </databrowse_BrowseRequest>""".format(b[6],b[4],b[5],b[0],b[1],b[3],z,to_time,from_time)
    
    r = requests.post(browse, data=xml, headers=headers)
    print (r.status_code)
    r_string = (str(r.text))
    r_string = (r_string.replace('path', ' uniquekey '))
    a = r_string.split()
    count = (a.count('uniquekey'))
    jsonx = (xmltodict.parse(r.text))
    if count == 1:
        print (count)
        print ("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ")
        print (jsonx['databrowse_BrowseResponseList']['browseResponses'])

    else:
        newpath=[]
        size=[]
        type1=[]
    
        if 'flags' in r.text:
            for i in jsonx['databrowse_BrowseResponseList']['browseResponses'][1]['browseResult']['dataResultSet']:
                print (" value of i", i)
                newpath.append(i['@path'])
                size.append(i['@size'])
                i22=0
                for i2 in i['flags']:
                    if i22==1: 
                      type1.append(i2) 
                    i22=i22+1
            print (newpath)
            print(size)
            print(type1)
            
            for i in range(0,len(newpath)): 
                if int(size[i]) < 10485760 and (type1[i]) == '@file':
                    restore_file.append(newpath[i])
    
                else:
                    if int(size[i]) > 0 and (type1[i]) == '@directory':
                        path1.append(newpath[i])
                        
            if restore_file:
                print ("These are the files of less than 10MB", restore_file)
                return restore_file
                print ("essage")
                
            else:
                if path1:
                    print ("directory of size more than 0 MB", path1)
                    #path2 = random.shuffle(path1)
                  # print(len(path1))
                    for i in range(0,len(path1)):
                        z = path1[i]
                        print (" browsing with new path", z)
                        g = browse_data(b,z,to_time,from_time)
                        return g
                        print ("New browsing path", path1[i])
                else:
                    print ("Browsing 2 new clients as no directries found with more than 0 bytes size")
                    b=browse_client()
                    z=b[7]
                    g = browse_data(b,z,to_time,from_time)
                    return g
                                    
        else:
            print ("Browsing new client")
            b=browse_client()
            z=b[7]
            g = browse_data(b,z,to_time,from_time)
            return g

g=browse_data(b,z,to_time,from_time)
restore_file = g
print (" files returning", restore_file)
restore_file1 = random.choice(restore_file)
print ("file to restore is:", restore_file1)

def restore_data(b,from_time,to_time,restore_file1):
    print ("================================================================")
    print ("================================================================")
    print ("restore data started")
    
    restore = service + "retrieveToClient"
    xml ="""<DM2ContentIndexing_RetrieveToClientReq mode="2" serviceType="1">
    <userInfo userGuid="4C1C8327-233F-46F5-910B-E873FBEBE494"/>
    <header>
    <srcContent clientId="{}" appTypeId="29" instanceId="{}" backupSetId="{}" subclientId="{}" fromTime="{}" toTime="{}"/>
    <destination clientId="{}" clientName="{}" inPlace="0">
    <destPath val="/tmp/"/>
    </destination>
    <filePaths val="{}"/>
    </header>
    <advanced unconditionalOverwrite="0" restoreDataAndACL="1" restoreDeletedFiles="1"/>
    </DM2ContentIndexing_RetrieveToClientReq>""".format(b[5],b[3],b[1],b[0],from_time,to_time,b[5],b[6],restore_file1)
    
    print (xml)
    r = requests.post(restore, data=xml, headers=headers)
    print (r.status_code)
    print (r.text)
    dictionary = (xmltodict.parse(r.text))
    jobId = dictionary['DM2ContentIndexing_RetrieveToClientResp']['@jobId']
    print (jobId)
    return jobId

k = restore_data(b,from_time,to_time,restore_file1)

def job_status(k):
    job = service + "Job/"+k
    r = requests.get(job, headers=headers)
    print (r.status_code)
    dictionary = (xmltodict.parse(r.text))
    print (dictionary)
    job_status = dictionary["JobManager_JobListResponse"]["jobs"]["jobSummary"]["@localizedStatus"]
    return job_status

j = job_status(k)
print (" Restoration status:", j)

    
    
        
