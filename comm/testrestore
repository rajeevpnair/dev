import requests
import sys
import xml.etree.ElementTree as ET
from xml.etree import ElementTree
import random
import xmltodict
import json

from random import randint

import base64
import json
global b

service = 'http://104.211.207.160/webconsole/api/'

loginReq = '<DM2ContentIndexing_CheckCredentialReq username="Cvadmin" password="<<password>>" />'

pwd = 'Qwerty@123'
pwd = bytes(pwd, encoding='utf8')
pwd = str(base64.b64encode(pwd), encoding='utf-8')
loginReq = loginReq.replace("<<password>>", pwd)
   
r = requests.post(service + 'Login', data=loginReq)
print ("==========================================================================")
token = None
print (r)
if r.status_code == 200:
   root = ET.fromstring(r.text)
   if 'token' in root.attrib:
      token = root.attrib['token']
      print ("Login Successful")
      print (r.status_code)
   else:
      print ("Login Failed")
      print (r.status_code)
      sys.exit(0)
else:
   print ('there was an error logging in')
   print (r.status_code)
   
def browse_client():
    
    schedules = service + "SchedulePolicy/177"
    headers = {'Authtoken': token, 'Content-Type': 'application/xml'}
    r = r = requests.get(schedules, headers=headers)
    dic = (xmltodict.parse(r.text))
    
    s=len(dic['TMMsg_GetTaskDetailResp']['taskInfo']['associations'])
    s1 = (randint(1, s-1))
    subclientId = dic['TMMsg_GetTaskDetailResp']['taskInfo']['associations'][s1]['@subclientId']
    backupsetId = dic['TMMsg_GetTaskDetailResp']['taskInfo']['associations'][s1]['@backupsetId']
    backupsetName = dic['TMMsg_GetTaskDetailResp']['taskInfo']['associations'][s1]['@backupsetName']
    instanceId = dic['TMMsg_GetTaskDetailResp']['taskInfo']['associations'][s1]['@instanceId']
    applicationId = dic['TMMsg_GetTaskDetailResp']['taskInfo']['associations'][s1]['@applicationId']
    clientId = dic['TMMsg_GetTaskDetailResp']['taskInfo']['associations'][s1]['@clientId']
    clientName = dic['TMMsg_GetTaskDetailResp']['taskInfo']['associations'][s1]['@clientName']
    subclient_BROWSE = service + "Subclient/"+subclientId+"/Browse?path=%5C"
    headers = {'Authtoken': token}
    r = requests.get(subclient_BROWSE, headers=headers)
    
    json1 = (xmltodict.parse(r.text))
    path = []
    if 'messages' in r.text:
        print ("There is no backups for the selected subclient")
        
    else:   
        for i in json1['databrowse_BrowseResponseList']['browseResponses'][0]['browseResult']['dataResultSet']:
            #print(type(i))
            if type(i)==str:
                if i=="@path":
                   path.append(json1['databrowse_BrowseResponseList']['browseResponses'][0]['browseResult']['dataResultSet'][i])
            else:
                for z in i:
                    if z == "@path":
                       path.append(i[z])
    print (type(path))
    #path.remove(/dev)     
    path = random.choice(path)
    print (path)
    print (subclientId, backupsetId, backupsetName, instanceId, applicationId, clientId, clientName, path)
    return subclientId, backupsetId, backupsetName, instanceId, applicationId, clientId, clientName, path

b=browse_client()
b=list(b)

def browse_data(b):
    browse = service + "DoBrowse"
    xml ="""<databrowse_BrowseRequest opType="browse">
      <entity clientName="{}" applicationId="{}" clientId="{}" subclientId="{}" backupsetId="{}" instanceId="{}"/>
      <paths path="{}"/>
      <options showDeletedFiles="1" restoreIndex="1"/>
      <mode mode="2"/>
      <queries type="1" queryId="countQuery">
        <aggrParam aggrType="4" field="0"/>
      </queries>
      <queries type="0" queryId="dataQuery">
        <dataParam>
          <paging firstNode="0" skipNode="0" pageSize="15"/>
          <sortParam ascending="1">
            <sortBy val="38"/>
            <sortBy val="0"/>
          </sortParam>
        </dataParam>
      </queries>
    </databrowse_BrowseRequest>""".format(b[6],b[4],b[5],b[0],b[1],b[3],b[7])
    print (xml)
    
    r = requests.post(browse, data=xml, headers=headers)
    print (r.status_code)
    print ("==========================================================================")
    print ("==========================================================================")
    jsonx = (xmltodict.parse(r.text))
    #print (json)
    newpath=[]
    size=[]
    type1=[]

    #if r.text contains
    if 'flags' in r.text:
        for i in jsonx['databrowse_BrowseResponseList']['browseResponses'][1]['browseResult']['dataResultSet']:
            newpath.append(i['@path'])
            size.append(i['@size'])
            i22=0
            for i2 in i['flags']:
                if i22==1: 
                  type1.append(i2) 
                i22=i22+1
    else:
        print ("looping in the clients to get files")
        b=browse_client()
        browse_data(b)
    return newpath,size,type1

g=browse_data(b)
newpath=g[0]
size=g[1]
type1=g[2]
for i in range(0,len(newpath)):
    #print(newpath[i],newsize[i],type1[i])
    if (size[i]) < '10485760' and (type1[i]) == '@file':
        restore_file = (newpath[i])
        restore_file = random.choice(restore_file)
        print ("file to restore is", restore_file)
        break
    
for i in range(0,len(newpath)):
    if (size[i]) > '0' and (type1[i]) == '@directory':
        path1 = (newpath[i])
        print ("directory", newpath[i])
        


        
    
        
